package  {		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.filesystem.File;	import flash.filesystem.FileMode;	import flash.filesystem.FileStream;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.utils.Dictionary;	import flash.profiler.Telemetry;	import flash.utils.ByteArray;		public class MapEditor extends MovieClip {				private var backgroundPicture:Array;		private var mapPoints:Array;		private var mapLinks:Array;				private function openFile(e:Event) {						var map:Object;						var inFile : File = new File();						inFile.browseForOpen("Open File");						inFile.addEventListener(Event.SELECT, function(e:Event) : void{								fileName.text = inFile.nativePath;				//fileName.text = inFile.name;								var fs:FileStream = new FileStream();				fs.open(inFile, FileMode.READ);								try {											map = JSON.parse( fs.readUTFBytes(fs.bytesAvailable) );										} catch (e:SyntaxError) {										map = null;					fileName.text = "Could Not Load " + inFile.name;									}								fs.close();								loadMap(map);							});								}				private function saveFile(e:Event) {						var outFile : File = new File();						outFile.browseForSave("Save File");						outFile.addEventListener(Event.SELECT, function(e:Event) : void{															var dict:Dictionary = new Dictionary();										dict["LOL1"] = "lol1";					dict["LOL2"] = "lol2";					dict["LOL3"] = "lol3";										var test:Array = new Array();										test[0] = dict;										fileName.text = outFile.nativePath;										var fs:FileStream = new FileStream();					fs.open(outFile, FileMode.WRITE);										fs.writeUTFBytes( JSON.stringify(test) );										fs.close();									});					}				private function loadMap(map:Object) {					}				private function addNode(e:Event) {						trace("ADD NODE");											}				private function pickBackground(e:Event) {						var backgroundPicture : File = new File();						backgroundPicture.browseForOpen("Select Background File");						backgroundPicture.addEventListener(Event.SELECT, function(e:Event) : void{								var fs:FileStream = new FileStream();				fs.open(backgroundPicture, FileMode.READ);								//fs.readUTFBytes(fs.bytesAvailable)				//fs.readMultiByte(fs.bytesAvailable, 								fs.close();							});					}				public function MapEditor() {						DictionaryJSON.fixJSON();						fileName.text = "No File Loaded";						openButton.addEventListener(MouseEvent.CLICK, openFile);			saveButton.addEventListener(MouseEvent.CLICK, saveFile);						editorFrame.addEventListener(MouseEvent.DOUBLE_CLICK, addNode);			editorFrame.addEventListener(MouseEvent.RIGHT_CLICK, pickBackground);					}							}	}