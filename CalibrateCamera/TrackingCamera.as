package  {		import flash.media.Camera;	import flash.geom.Point;	import flash.geom.Matrix3D;	import flash.geom.Vector3D;		public class TrackingCamera {		var cameraWidth:uint;		var cameraHeight:uint;				var camera:Camera;				var colourTracker:RedTracker;		var footTracker:FootTracker;				var A : Point;		var B : Point;		var C : Point;		var D : Point;				var transformMatrix : Matrix3D;				var foot : Point;				public function TrackingCamera(camera:Camera) {						this.camera = camera;						cameraWidth = camera.width;			cameraHeight = camera.height;						colourTracker = new RedTracker(camera, cameraWidth, cameraHeight);			footTracker = new FootTracker(camera, cameraWidth, cameraHeight);					}				public function calibrate() : void {						var cornerAt:Point = colourTracker.track();						if (cornerAt == null)				return;						if ( calibrated() )				return;						if (A == null) {				A = cornerAt;				return;			}						if (B == null) {				B = cornerAt;				return;			}						if (C == null) {				C = cornerAt;				return;			}						if (D == null) {				D = cornerAt;			}						var xs : Vector3D = new Vector3D(0, 1, 0, 1);			var ys : Vector3D = new Vector3D(0, 0, 1, 1);			var zs : Vector3D = new Vector3D(0, 0, 0, 0);			var ws : Vector3D = new Vector3D(1, 1, 1, 1);						var m : Matrix3D = new Matrix3D();						// do the 'correction'			var cameraBase : Point = new Point(camera.width / 2, camera.height);						var correctionFactor : Number = 1e-20;						var Az : Number = 0;			var Bz : Number = 0;			var Cz : Number = 0;			var Dz : Number = 0;						var furthestPoint : Point = A;						if ( B.subtract(cameraBase).length > furthestPoint.subtract(cameraBase).length )				furthestPoint = B;						if ( C.subtract(cameraBase).length > furthestPoint.subtract(cameraBase).length )				furthestPoint = C;							if ( D.subtract(cameraBase).length > furthestPoint.subtract(cameraBase).length )				furthestPoint = D;						if (furthestPoint == A)				Az = correctionFactor;							if (furthestPoint == B)				Bz = correctionFactor;						if (furthestPoint == C)				Cz = correctionFactor;							if (furthestPoint == D)				Dz = correctionFactor;						// end 'correction'						// slightly off so the det of the matrix can be non zero			m.copyRowFrom(0, new Vector3D(A.x, A.y, Az, 1));			m.copyRowFrom(1, new Vector3D(B.x, B.y, Bz, 1));			m.copyRowFrom(2, new Vector3D(C.x, C.y, Cz, 1));			m.copyRowFrom(3, new Vector3D(D.x, D.y, Dz, 1));						var mi : Matrix3D = m.clone();			mi.invert();						var abcd : Vector3D = mi.transformVector(xs);			var efgh : Vector3D = mi.transformVector(ys);			var ijkl : Vector3D = mi.transformVector(zs);			var mnop : Vector3D = mi.transformVector(ws);						transformMatrix =  new Matrix3D();						transformMatrix.copyRowFrom(0, abcd);			transformMatrix.copyRowFrom(1, efgh);			transformMatrix.copyRowFrom(2, ijkl);			transformMatrix.copyRowFrom(3, mnop);					}				public function calibrated() : Boolean {						return ( transformMatrix != null );					}				public function trackFoot() : Point {						foot = footTracker.track();						if (! calibrated())				return null;						if (foot == null)				return null;						var currentVector : Vector3D = new Vector3D(foot.x, foot.y, 0);			var calcPos : Vector3D = transformMatrix.transformVector(currentVector);						return new Point(calcPos.x, calcPos.y);					}			}	}