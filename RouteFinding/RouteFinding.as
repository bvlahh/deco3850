package  {		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.display.Sprite;	import flash.net.URLLoader;	import flash.text.TextField;	import flash.text.TextFieldType;	import flash.net.URLRequest;	import flash.net.URLLoader;	import flash.display.IBitmapDrawable;		public class RouteFinding extends MovieClip {				private static var WAYPOINTFILE = "./waypoints.txt";		private var waypoints:Object;				private var startNodeName:TextField;		private var endNodeName:TextField;		private var searchButton:Sprite;				public function RouteFinding() {						var myRequest:URLRequest = new URLRequest(WAYPOINTFILE);			var myLoader = new URLLoader();						myLoader.addEventListener(Event.COMPLETE, JSONLoad);			myLoader.load(myRequest);						function JSONLoad(evt:Event):void			{				waypoints = JSON.parse(myLoader.data);			}						addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);					}				private function onAddedToStage(e:Event) : void {						startNodeName = new TextField();			startNodeName.type = TextFieldType.INPUT;            startNodeName.border = true;			startNodeName.x = 0;			startNodeName.y = 0;			startNodeName.width = 200;			startNodeName.height = 20;						this.addChild(startNodeName);						endNodeName = new TextField();			endNodeName.type = TextFieldType.INPUT;            endNodeName.border = true;			endNodeName.x = 0;			endNodeName.y = 20;			endNodeName.width = 200;			endNodeName.height = 20;						this.addChild(endNodeName);						searchButton = new Sprite();			searchButton.graphics.beginFill(0xDDDDDD);			searchButton.graphics.drawRect(0, 40, 200, 20);						this.addChild(searchButton);						searchButton.addEventListener(MouseEvent.CLICK, search);					}				private function search(e:Event) : void {						var node:String;						var loc:String = startNodeName.text;			var target:String = endNodeName.text;						var startNode:String = null;			var endNode:String = null;						for (node in waypoints)				if (waypoints[node]["name"] == loc)					startNode = node;						for (node in waypoints)				if (waypoints[node]["name"] == target)					endNode = node;						if ( (startNode == null) || (endNode == null) )				throw new Error("Invalid end nodes");						function rd(currentNode:String, visitedNodes:Array, goalState:String, depth:int) : Array {								if (depth == 0)					return null;								var myVisitedNodes:Array = new Array();				myVisitedNodes = myVisitedNodes.concat(visitedNodes);								myVisitedNodes.push(currentNode);								if (currentNode == goalState)					return myVisitedNodes;								var node:String;								for (node in waypoints[currentNode]["neighbours"]) {										if ( myVisitedNodes.indexOf(waypoints[currentNode]["neighbours"][node]) == -1 ) {												var ret:Array = rd(waypoints[currentNode]["neighbours"][node], myVisitedNodes, endNode, depth-1);												if (ret != null)							return ret;											}									}								return null;							}						function ids(currentNode:String, goalState:String) : Array {								var i:int;								for (i=0; i<=waypoints.length; i++) {										var goalPath : Array = rd(currentNode, new Array(), endNode, i);										if (goalPath != null)						return goalPath;									}								return null;							}						trace( ids(startNode, endNode) );					}			}	}